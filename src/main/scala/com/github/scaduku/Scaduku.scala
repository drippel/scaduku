package com.github.scaduku

import com.github.scaduku.heuristic.{HiddenPairs, NakedPairs}

class Scaduku {

}

object Scaduku {


  def main (args : Array[String]) : Unit = {

    Console.println("scaduku")
    // medium
    /*
    solve( "030005048000090030900308025091000000703000409000000560420607003060050000180900070" )
    solve( "000000050060300001020401096002049080900572003070830900230605010500003060010000000" )
    solve( "700613000400000000060000915800091400010364070006580001182000040000000008000438002" )
    solve( "010600003009001000000248900000004190042060380098700000004827000000400200900003040" )
    solve( "000000900304009005070500043090260000027000590000075010830004060600300704002000000" )
    solve( "000004028406000005100030600000301000087000140000709000002010003900000507670400000" )
    // hard
    solve( "002500600300080000090400035000038010000704000070920000680007050000010004004005900" )
    solve( "400010000000309040070005009000060021004070600190050000900400070030608000000030006" )
    // evil
    solve( "000000070700093500900100000620080100047000920005030068000006002009750006080000000" )
    */
    solve( "409716000610389040070245169000964021004173690196852030960421070030698000040537906" )

  }

  def solve( hint : String ) = {
    var grid = new Grid()
    grid.placeHints( hint )
    Printer.print( grid )
    Console.println( Solver.reduce( grid ) )
    Printer.print( grid )
    if( !grid.isSolved() ){
      Printer.possibles(grid)
    }

    val hp = new HiddenPairs()
    hp.eliminate(grid)
    Printer.print( grid )
    if( !grid.isSolved() ){
      Printer.possibles(grid)
    }
  }

}
